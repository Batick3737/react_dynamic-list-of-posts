{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setOpenNewComment","className","map","post","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","useState","name","setName","email","setEmail","setBody","errorName","setErrorName","errorEmail","setErrorEmail","errorBody","setErrorBody","loadComment","setLoadComment","addComment","a","postId","comments","onSubmit","event","preventDefault","htmlFor","placeholder","classnames","value","onChange","target","PostDetails","openNewComment","hasErrorComment","setHarErrorComment","load","setLoad","loadComments","getComments","useEffect","length","comment","href","filter","com","deleteComment","UserSelector","setSelectedUserId","openList","setOpenList","users","setUsers","selectUserName","setSelectUserName","res","boolean","role","user","classNames","App","selectedUserId","setPosts","hasErrorPosts","setHarErrorPosts","loadPosts","getPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e105bb5b.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (post: Post | null) => void;\n  setOpenNewComment: (openNewComment: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setOpenNewComment,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={`button is-link ${selectedPost === post ? 'is-dark' : 'is-light'}`}\n                  onClick={() => {\n                    if (selectedPost === post) {\n                      setSelectedPost(null);\n                    } else {\n                      setSelectedPost(post);\n                    }\n\n                    setOpenNewComment(false);\n                  }}\n                >\n                  {selectedPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null;\n  setComments: (comments: Comment[]) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ post, setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [errorName, setErrorName] = useState(false);\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [errorBody, setErrorBody] = useState(false);\n  const [loadComment, setLoadComment] = useState(false);\n\n  const addComment = async (data: CommentData) => {\n    if (name === '') {\n      setErrorName(true);\n    }\n\n    if (email === '') {\n      setErrorEmail(true);\n    }\n\n    if (body === '') {\n      setErrorBody(true);\n    }\n\n    if (name === '' || email === '' || body === '') {\n      return;\n    }\n\n    setLoadComment(true);\n    await client.post<Comment>('/comments', {\n      postId: post?.id,\n      name: data.name,\n      email: data.email,\n      body: data.body,\n    });\n\n    const comments = await client.get<Comment[]>(`/comments?postId=${post?.id}`);\n\n    setComments(comments);\n    setLoadComment(false);\n    setBody('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addComment({ name, email, body });\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classnames('input', { 'is-danger': errorName })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setErrorName(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classnames('input', { 'is-danger': errorEmail })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setErrorEmail(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classnames('textarea', { 'is-danger': errorBody })}\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n              setErrorBody(false);\n            }}\n          />\n        </div>\n\n        {errorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classnames(\n              'button is-link',\n              { 'is-loading': loadComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setName('');\n              setEmail('');\n              setBody('');\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  post: Post | null;\n  openNewComment: boolean;\n  setOpenNewComment: (openNewComment: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  openNewComment,\n  setOpenNewComment,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasErrorComment, setHarErrorComment] = useState(false);\n  const [load, setLoad] = useState(false);\n\n  const loadComments = async () => {\n    setLoad(true);\n    const getComments = await client.get<Comment[]>(`/comments?postId=${post?.id}`);\n\n    try {\n      setComments(getComments);\n    } catch {\n      setHarErrorComment(true);\n    } finally {\n      setLoad(false);\n    }\n  };\n\n  const deleteComment = (comment: Comment) => {\n    client.delete(`/comments/${comment.id}`);\n    setComments(comments.filter(com => com.id !== comment.id));\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [post?.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {load && <Loader />}\n          {hasErrorComment && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {comments.length === 0 && !load && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          {!load && (\n            <>\n              {comments.length > 0 && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => deleteComment(comment)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n              {!openNewComment && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setOpenNewComment(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        { openNewComment && (\n          <NewCommentForm post={post} setComments={setComments} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  setSelectedUserId: (userId: number) => void;\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setSelectedUserId,\n  setSelectedPost,\n}) => {\n  const [openList, setOpenList] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectUserName, setSelectUserName] = useState('');\n\n  useEffect(() => {\n    client.get<User[]>('/users').then(res => setUsers(res));\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setOpenList(boolean => !boolean)}\n        >\n          <span>{selectUserName || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {openList && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                key={user.id}\n                onClick={() => {\n                  setSelectUserName(user.name);\n                  setSelectedUserId(user.id);\n                  setOpenList(false);\n                  setSelectedPost(null);\n                }}\n                href={`#user-${user.id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectUserName === user.name },\n                )}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [hasErrorPosts, setHarErrorPosts] = useState(false);\n  const [load, setLoad] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [openNewComment, setOpenNewComment] = useState(false);\n\n  const loadPosts = async () => {\n    if (selectedUserId) {\n      setLoad(true);\n      const getPosts = await client.get<Post[]>(`/posts?userId=${selectedUserId}`);\n\n      try {\n        setPosts(getPosts);\n      } catch {\n        setHarErrorPosts(true);\n      } finally {\n        setLoad(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setSelectedUserId={setSelectedUserId}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {load && <Loader />}\n\n                {hasErrorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts.length === 0 && selectedUserId !== 0 && !load && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && !load && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setOpenNewComment={setOpenNewComment}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  openNewComment={openNewComment}\n                  setOpenNewComment={setOpenNewComment}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}